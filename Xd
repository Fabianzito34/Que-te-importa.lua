getgenv().SecureMode = true
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local SilentAim = {
    Enabled = true,
    TeamCheck = false,
    VisibleCheck = false,
    TargetPart = "HumanoidRootPart",
    FOVRadius = 200,
    FOVVisible = false,
    ShowSilentAimTarget = false,
    MouseHitPrediction = true,
    MouseHitPredictionAmount = 0.165,
    HitChance = 100,
    ConfigFolder = "SilentAim_KingLegacy_Rayfield"
}

local Window = Rayfield:CreateWindow({
    Name = "Silent Aim â€“ King Legacy",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = SilentAim.ConfigFolder,
        FileName = "config"
    },
    KeySystem = false
})

local Tab = Window:CreateTab("Settings")
local Section = Tab:CreateSection("Silent Aim Options")

Section:CreateToggle({ Name = "Enabled", CurrentValue = SilentAim.Enabled, Flag = "enableToggle", Callback = function(v) SilentAim.Enabled = v end })
Section:CreateToggle({ Name = "Team Check", CurrentValue = SilentAim.TeamCheck, Flag = "teamCheck", Callback = function(v) SilentAim.TeamCheck = v end })
Section:CreateToggle({ Name = "Visible Check", CurrentValue = SilentAim.VisibleCheck, Flag = "visibleCheck", Callback = function(v) SilentAim.VisibleCheck = v end })
Section:CreateDropdown({ Name = "Target Part", Options = {"Head","HumanoidRootPart","Random"}, CurrentOption = SilentAim.TargetPart, Flag = "targetPart", Callback = function(v) SilentAim.TargetPart = v end })
Section:CreateToggle({ Name = "Prediction", CurrentValue = SilentAim.MouseHitPrediction, Flag = "predictionToggle", Callback = function(v) SilentAim.MouseHitPrediction = v end })
Section:CreateSlider({ Name = "Prediction Amt", Range = {0,1}, Increment = 0.01, CurrentValue = SilentAim.MouseHitPredictionAmount, Flag = "predictionAmt", Callback = function(v) SilentAim.MouseHitPredictionAmount = v end })
Section:CreateSlider({ Name = "FOV Radius", Range = {0,360}, Increment = 1, CurrentValue = SilentAim.FOVRadius, Flag = "fovRadius", Callback = function(v) SilentAim.FOVRadius = v end })
Section:CreateToggle({ Name = "Show FOV", CurrentValue = SilentAim.FOVVisible, Flag = "showFOV", Callback = function(v) SilentAim.FOVVisible = v end })
Section:CreateToggle({ Name = "Show Target", CurrentValue = SilentAim.ShowSilentAimTarget, Flag = "showTarget", Callback = function(v) SilentAim.ShowSilentAimTarget = v end })
Section:CreateSlider({ Name = "Hit Chance %", Range = {0,100}, Increment = 1, CurrentValue = SilentAim.HitChance, Flag = "hitChance", Callback = function(v) SilentAim.HitChance = v end })

local fov_circle = Drawing.new("Circle")
local mouse_box = Drawing.new("Square")
fov_circle.Thickness, fov_circle.NumSides, fov_circle.Filled, fov_circle.ZIndex = 1, 100, false, 999
mouse_box.Thickness, mouse_box.Filled, mouse_box.ZIndex = 20, true, 999
fov_circle.Color = Color3.new(0,1,0)
mouse_box.Color = Color3.new(1,0,0)

local function CalculateChance(p) return (math.random() * 100) <= p end
local function getMousePosition() local ok,pos = pcall(UserInputService.GetMouseLocation,UserInputService) return ok and pos or Vector2.zero end
local function getClosestPlayer()
    local closest, dist = nil, SilentAim.FOVRadius
    for _,pl in ipairs(Players:GetPlayers()) do
        if pl ~= LocalPlayer and pl.Character and pl.Character:FindFirstChild("Humanoid") then
            local hum = pl.Character.Humanoid
            if hum.Health<=0 or (SilentAim.TeamCheck and pl.Team==LocalPlayer.Team) then continue end
            local tp = pl.Character:FindFirstChild(SilentAim.TargetPart)
            if not tp then continue end
            local sp,on = Camera:WorldToViewportPoint(tp.Position)
            if not on then continue end
            if SilentAim.VisibleCheck and #Camera:GetPartsObscuringTarget({tp.Position},{LocalPlayer.Character,pl.Character})>0 then continue end
            local d = (Vector2.new(sp.X,sp.Y)-getMousePosition()).Magnitude
            if d<dist then dist,closest = d,tp end
        end
    end
    return closest
end
local function getDirection(o,t)
    local pos = SilentAim.MouseHitPrediction and (t.Position+t.Velocity*SilentAim.MouseHitPredictionAmount) or t.Position
    return (pos-o).Unit*1000
end

local oldNamecall; oldNamecall = hookmetamethod(game,"__namecall",newcclosure(function(...)
    local args = {...}
    if not checkcaller() and args[1]==workspace and getnamecallmethod()=="Raycast" and SilentAim.Enabled and CalculateChance(SilentAim.HitChance) then
        local tgt = getClosestPlayer()
        if tgt then args[3]=getDirection(args[2],tgt) return oldNamecall(unpack(args)) end
    end
    return oldNamecall(...)
end))

local oldIndex; oldIndex = hookmetamethod(game,"__index",newcclosure(function(self,key)
    if self==Mouse and not checkcaller() and SilentAim.Enabled then
        local tgt = getClosestPlayer()
        if tgt then if key=="Target" then return tgt end if key=="Hit" then return tgt.CFrame end end
    end
    return oldIndex(self,key)
end))

RunService.RenderStepped:Connect(function()
    local mp = getMousePosition()
    fov_circle.Position, fov_circle.Radius, fov_circle.Visible = mp, SilentAim.FOVRadius, SilentAim.FOVVisible
    local tgt = getClosestPlayer()
    mouse_box.Visible = SilentAim.ShowSilentAimTarget and tgt and (function(sp,on) mouse_box.Position=Vector2.new(sp.X,sp.Y) return on end)(Camera:WorldToViewportPoint((tgt or {}).Position or Vector3.new())) or false
end)

Rayfield:LoadConfiguration()
